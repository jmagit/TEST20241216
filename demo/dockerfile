# Normal
# empaquetar: mvnw clean package
FROM openjdk:17-alpine
COPY target/demo-0.0.1-SNAPSHOT.jar /usr/app.jar
EXPOSE 8080
ENTRYPOINT ["java","-jar","/usr/app.jar"]

# Nativa
# generar: mvnw clean spring-boot:build-image
#FROM demo:0.0.1-SNAPSHOT
#EXPOSE 8080

# crear imagen: docker build -t ms-demo .
# crear contenedor (defecto): docker run -d --name ms-demo -p 8010:8080 --env DB_SERVER=mysql-sakila:3306 --env DISCOVERY_URL=http://ms-eureka-server:8761 --env CONFIGSRV_URL=http://ms-config-server:8888/ --env ADMINSRV_URL=http://host.docker.internal:8081 --env ZIPKINSRV_URL=http://zipkin:9411 --network microservicios ms-demo
# crear contenedor 2: docker run -d --rm --name ms-demo-2 -p 8011:8080 --env DB_SERVER=mysql-sakila:3306 --env DISCOVERY_URL=http://ms-eureka-server:8761 --env CONFIGSRV_URL=http://ms-config-server:8888/ --env ADMINSRV_URL=http://host.docker.internal:8081 --env ZIPKINSRV_URL=http://zipkin:9411 --network microservicios ms-demo
# crear contenedor 3: docker run -d --rm --name ms-demo-3 -p 8012:8080 --env DB_SERVER=mysql-sakila:3306 --env DISCOVERY_URL=http://ms-eureka-server:8761 --env CONFIGSRV_URL=http://ms-config-server:8888/ --env ADMINSRV_URL=http://host.docker.internal:8081 --env ZIPKINSRV_URL=http://zipkin:9411 --network microservicios ms-demo
# a√±adir a red: docker network connect microservicios ms-demo
